{
    "collab_server" : "",
    "contents" : "#' Get ROIs\n#'\n#' This function reads in a set of ImageJ ROIs and returns a polygon data frame.\n#' @param folder character describing the system file path for the folder containing ROIs (can't be a zip-file) so unzip before.\n#' @keywords ROI\n#' @export\n#' @examples\n#' cytosol.folder<-system.file('data/roi/RoiSet_cytosol', package='leeplyr')\n#' nuclei.folder<-system.file('data/roi/RoiSet_cytosol', package='leeplyr')\n#' cytosol<-get.rois(cytosol.folder)\n#' nuclei<-get.rois(nuclei.folder)\nget.rois<-function(folder){\n  roi.cytosol<-dir(folder, full.names=TRUE)\n  \n  polygon<-read.ijroi(roi.cytosol[1])\n  poly<-data.frame(x = polygon$coords[,1], y = polygon$coords[,2], id = rep(1, nrow(polygon$coords)))\n  for(i in 2:length(roi.cytosol)){\n    polygon<-read.ijroi(roi.cytosol[i])\n    poly.tmp<-data.frame(x = polygon$coords[,1], y = polygon$coords[,2], id = rep(i, nrow(polygon$coords)))\n    poly<-rbind(poly, poly.tmp)\n  }\n  \n  cat(paste('Number of ROIs loaded:', length(unique(poly$id)), '\\n'))\n  return(poly)\n  \n}\n\n#' Plot polygon\n#'\n#' Draws polygon for a polygon data frame.\n#' @param dataframe data frame, a polygon data frame with list items x, y, and id.\n#' @param col character, fill color for polygon. character\n#' @keywords polygon\n#' @export\n#' @examples\n#' cytosol<-get.rois(cytosol.folder)\n#' plot(cytosol[,1:2], col = 0)\n#' plot.polygon(cytosol, col='pink')\nplot.polygon<-function(dataframe, col){\n  lapply(unique(dataframe$id), function(x){polygon(dataframe$x[dataframe$id==x], dataframe$y[dataframe$id==x], col=col)})\n}\n\n\n#' Map transcripts to ROI \n#'\n#' Maps each individual transcripts to one or more region of interests (ROIs).\n#' @param transcripts FISSEQ readr output tsv file path.\n#' @param roi.folder character vector, each element is the location of folder containing ImageJ roi files.\n#' @param roi.labels character vector, .\n#' @param OR.cutoff numeric, absolute OR value on log2 coordinates to use as cut-off. Default is 5.\n#' @param p.value.cutoff numeric, p-value on negative log10 coordinates to use as cut-off. Default is 20.\n#' @param plot boolean, plot output graph. Default is TRUE.\n#' @param roi.col character vector, Color of regions of interest. Default is c('#C8EAEB', '#FCDAD1').\n#' @param transcript.col character, color or transcripts in plot. Default is 'black'.\n#' @param cex numeric, Size of transcripts on plot showing alll transcripts. Default is 0.2. \n#' @export\n#' @examples\n#' cytosol.folder<-system.file('data/roi/RoiSet_cytosol', package='leeplyr')\n#' nuclei.folder<-system.file('data/roi/RoiSet_nuclei', package='leeplyr')\n#' transcripts<-system.file('data/fisseq/res_001_001FISSEQ.out', package='leeplyr')\n#' map.to.roi(transcripts, roi.folder = c(cytosol.folder, nuclei.folder), roi.labels =  c('cytoplasm', 'nucleus'), OR.cutoff = 5, p.value.cutoff = 20)\nmap.to.roi<-function(transcripts, roi.folder = c(cytosol.folder, nuclei.folder), roi.labels =  c('cytoplasm', 'nucleus'), OR.cutoff = 5, p.value.cutoff = 20, plot = TRUE, roi.col = c('#C8EAEB', '#FCDAD1'), transcript.col = 'black', cex = 0.2){\n  #read ROIs\n  rois<-list()\n  ylim<-numeric()\n  xlim<-numeric()\n  for(i in seq_along(roi.folder) ){\n    rois[[i]]<-get.rois(roi.folder[i])\n    xlim<-append(xlim, range(rois[[i]]$x) )\n    ylim<-append(ylim, range(rois[[i]]$y) )\n  }\n  #read transcripts\n  amplicons <- read_delim(transcripts, \"\\t\", escape_double = FALSE, trim_ws = TRUE)\n  xlim<-append(xlim, range(amplicons$centroid_y) )\n  ylim<-append(ylim, range(amplicons$centroid_x) )\n  ylim<-range(ylim)\n  xlim<-range(xlim)\n  cat('LOADED transcripts .tsv file')\n  #check in polygon\n  check.inside<-list()\n  for(i in seq_along(roi.folder) ){\n    check.inside[[i]]<-rep(0, nrow(amplicons))\n    for(j in unique(rois[[i]]$id) ){\n      check.inside[[i]]<-check.inside[[i]]+point.in.polygon(amplicons$centroid_y, amplicons$centroid_x, rois[[i]]$x[which(rois[[i]]$id==j)], rois[[i]]$y[which(rois[[i]]$id==j)])\n    }\n  }\n  \n  \n  roi.output<-data.frame(do.call(\"cbind\", check.inside))\n  names(roi.output)<-paste0('ROI.', roi.labels)  \n  roi.output<-cbind( data.frame(gene.symbol = amplicons$string_gene_symbols, strand = amplicons$strand, x = amplicons$centroid_y, y = amplicons$centroid_x), roi.output)\n  \n  inside.roi<-list()\n  for(i in seq_along(roi.folder)[-length(roi.folder)] )\n    inside.roi[[i]]<-( (roi.output[,4+i] > 0)&(roi.output[,4+i+1] == 0) )\n  inside.roi[[i+1]]<-(roi.output[,4+i+1] > 0)\n  inside.roi<-do.call(\"cbind\", inside.roi)\n  \n  gene.symbols<-unique(roi.output$gene.symbol)\n  OR<-rep(NA, length(gene.symbols))\n  p.value<-rep(NA, length(gene.symbols))\n  for(k in unique(roi.output$gene.symbol)){\n    N<-table(roi.output$gene.symbol == k, 1-inside.roi[,2])\n    if(!is.null(dim(N))){\n        OR[which(gene.symbols == k)] <- fisher.test(N)$estimate\n        p.value[which(gene.symbols == k)] <- fisher.test(N)$p.value\n    }\n  }\n  \n  p.value[which(p.value==0)]<-as.numeric( noquote(unlist(format(.Machine)))[3] )\n  \n  interesting<-which(abs(log2(OR))> OR.cutoff & -log10(p.value)> p.value.cutoff)\n\n  print.output<-data.frame(gene = gene.symbols, OR, p.value)[interesting, ]\n  print.output$roi<- log2(print.output$OR)>0\n  print.output$OR<-log2(print.output$OR)\n  print.output$p.value<- -log10( print.output$p.value)\n  print.output$roi<-rev(roi.labels)[print.output$roi+1]  \n  print.output<-print.output[order(print.output$OR),]\n  print.output<-print.output[is.finite(print.output$OR),]\n\n  #plot results\n  if(plot){\n    par(mfrow=c(1,3))\n    plot(rois[[1]]$x, rois[[1]]$y, col=0, asp=1, ylim=rev(ylim), xlim = xlim, ylab='', xlab='')\n    for(i in seq_along(roi.folder)){\n      plot.polygon(rois[[i]], col = roi.col[i])\n    }\n    points(amplicons$centroid_y, amplicons$centroid_x, pch = 16, cex = cex, col = transcript.col)\n    \n    \n    plot(rois[[1]]$x, rois[[1]]$y, col=0, asp=1, ylim=rev(ylim), xlim = xlim, ylab='', xlab='')\n    for(i in seq_along(roi.folder)){\n      plot.polygon(rois[[i]], col = roi.col[i])\n    }\n    max.roi1<-print.output$gene[1]\n    max.roi2<-print.output$gene[2]\n    \n    points(amplicons$centroid_y, amplicons$centroid_x, pch = 16, cex = 0.7, col = c(NA, 'purple', 'green3', 'red')[(amplicons$string_gene_symbols == max.roi1)*3 + (amplicons$string_gene_symbols == max.roi2)*2 + (amplicons$string_gene_symbols== 'RNA18S5,RNA45S5')*1 + 1] )\n    legend('bottomleft', c('18S', as.character(max.roi2), as.character(max.roi1)), pch=16, col=c('purple', 'green3', 'red'), bg='white')\n    \n    par(yaxs='i', xaxs='r')\n    ylim<-rep(max(abs(range(log2(OR), na.rm=TRUE, finite = TRUE))), 2)*c(-1,1)\n    plot(-log10(p.value), log2(OR), col=0, ylim=ylim, ylab=expression(log[2]*(OR)), xlab=expression(-log[10]*(P-value)) )\n    polygon(c(-20, max(-log10(p.value), na.rm=TRUE)+20,  max(-log10(p.value), na.rm=TRUE)+20, -20), c(0, 0, rep(ylim[1]*1.1, 2)), col='#FCDAD1' )\n    polygon(c(-20, max(-log10(p.value), na.rm=TRUE)+20,  max(-log10(p.value), na.rm=TRUE)+20, -20), c(0, 0, -rep(ylim[1]*1.1, 2)), col='#C8EAEB' )\n    \n    points(-log10(p.value), log2(OR), pch=16, col=rgb(0,0,0,0.2))\n    \n    \n    for(i in interesting){\n      symb<-gene.symbols[i]\n        if(symb == 'RNA18S5,RNA45S5')\n          symb<-'18S'\n        if(symb == 'RNA45S5,RNA28S5')\n          symb<-'28S'\n      text(-log10(p.value)[i], log2(OR)[i], symb, pos = 2, offset = 0.75)\n    }\n    \n   \n  }\n  \n\n  print(print.output)\n\n  return(roi.output)\n  \n  \n}\n  \n  \n  \n  \n  \n  \n\n",
    "created" : 1516919763764.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1444549203",
    "id" : "5FF27756",
    "lastKnownWriteTime" : 1516942988,
    "last_content_update" : 1516942988077,
    "path" : "~/Documents/GitHub/leeplyr/R/roianalysis.R",
    "project_path" : "R/roianalysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}